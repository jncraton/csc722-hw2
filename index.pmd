% CSC722 Homework 2
% Jon Craton
% September 7, 2018

Problem 1
=========

Let’s assume the probability of hitting an aircraft by a missile is 0.1. 

What is the sample space if we have three missiles?
---------------------------------------------------

The sample space (where h is hit and m is miss) is:

    (
      (h,h,h),
      (h,h,m),
      (h,m,h),
      (h,m,m),
      (m,h,h),
      (m,h,m),
      (m,m,h),
      (m,m,m)
    )

Note that this assumes that the aircraft can survive a missile hit and be hit more than once.

What is the probability of hitting the aircraft in the first 3 tries? 
-----------------------------------------------------------------------

We know that the probability of hitting the aircraft in one try is 0.1. We can write this as:

    P(A) = .1

And the other two tries:

    P(B) = .1
    P(C) = .1

When considering three attempts, we are looking for:

    P(A ∪ B ∪ C)

We have the following definition that holds for independent, non-mutually exclusive events to help us solve this:

    P(A ∪ B) = P(A) + P(B) - P(A ∩ B)

Let's take a moment to reason about the above formula and generalize it to any number of events. We initially sum the probabilities of two events. This would be all that we need to do if the events were mutually exclusive, but because their sample spaces overlap, we need to subtract probability that both events happen, otherwise we would be double-counting that outcome. Here's a first attempt to generalize this to 3 events:

    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(A ∩ B) - P(B ∩ C) - P(A ∩ C)

This is close, but we are now failing to count the probability of all three events occuring as this was double-counted when we removed the probability of each pair of events. So, we need to add this back in as:

    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(A ∩ B) - P(B ∩ C) - P(A ∩ C) + P(A ∩ B ∩ C)

Mathematically, this can be reasoned as follows:

    Let D = B ∪ C
    
    P(A ∪ B ∪ C) = P(A ∪ D)
    P(A ∪ B ∪ C) = P(A) + P(D) - P(A ∩ D)
    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(B ∩ C) - P(A ∩ D)
      Because 
        P(D) = P(B ∪ C)
        P(D) = P(B) + P(C) - P(B ∩ C)
        
    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(B ∩ C) - P(A) × P(D)
      Because
        P(A ∩ D) = P(A) × P(D)
    
    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(B ∩ C) - P(A) × ( P(B) + P(C) - P(B ∩ C) )
    P(A ∪ B ∪ C) = P(A) + P(B) + P(C) - P(B ∩ C) - P(A ∩ B) - P(A ∩ C) + P(A ∩ B ∩ C)

Recall the following truth:

    P(A ∩ B) = P(A) × P(B)

Now we can plug in our probabilities:

    P(A ∪ B ∪ C) = .1 + .1 + .1 - .1×.1 - .1×.1 - .1×.1 + .1×.1×.1 = .271
  
To confirm our understanding, let's check our work with a quick montecarlo simulation:

```python
from random import random, sample

def montecarlo(probs):
  sims = [any([random() <= p for p in probs]) for _ in range(0,1000000)]
  
  return len([s for s in sims if s])/len(sims)

print(montecarlo([.1]*3))
```

That's as close as we might expect to .271, so we appear to have a reasonable solution.

What is the probability that hitting the aircraft in the first 5 tries?
-----------------------------------------------------------------------

Since the math here could become a bit of a grind, let's attempt to generalize our previous solution and create a program that can calculate this for us.

```python
from functools import reduce

def p_intersection(a,b):
  return a * b

def p_union(a,b):
  return a + b - p_intersection(a,b)

def p_union_all(probs):
  return reduce(p_union, probs, 0.0)

print(p_union_all([.1]*3))
```

That matches our previous result for three events, so let's calculate the answer for 5 events:

```python
print(p_union_all([.1]*5))
```

That should be the correct answer. Let's again confirm our answer via simulation:

```python
print(montecarlo([.1]*5))
```

That looks about right.

Having a general solution means that we can now calculate other fun results. For example, here's how many missiles it would take to ensure that we have nine nines of destructive reliability:

```python
for missiles in range(5,1000):
  if p_union_all([.1]*missiles) > .999999999:
    print(missiles)
    break
```

Problem 2
=========

Let’s assume 0 < x < 1 and -1 < y < 1

What is the sample space?
-------------------------

The sample space is {(x,y) | 0<x<1 ∧ -1<y<1}.

What is the probability that $x^{2} + {(1 - y)}^{2} < \frac{1}{9}$
-----

Assuming uniform probability throughout our sample space, the probability of the above equation being satisfied will be equal to the proportion of the sample space that it encompasses.

These inequality constraints can be graphed as:

![Figure from WolframAlpha: 0<x, x<1, -1<y, y<1, x^2+(1-y)^2<1/9](media/2-2-1.gif)

First we calculate the area of this quarter circle:

    πr²
    π(1/9)
    π/9 is the full circle area
    π/36 is the quarter circle area

The probability can be calculated by determining the proportional of the sample space covered by this area, so our final result is:

    ½ × π/36
    π/72

Here's the approximate decimal probability:

```python
import math

(1/72) * math.pi
```

Let's check this:

```python
events = 100000
successes = 0

for i in range(0,events):
  x = random()
  y = 2*random() - 1
  if x**2 + (1-y)**2 < 1/9: successes+=1

successes/events
```

That looks about right.

What is the probability that $x^{2} + {(1 - y)}^{2} > \frac{1}{16}$
-----

Here's a plot of the inequalities:

![Figure from WolframAlpha: 0<x, x<1, -1<y, y<1, x^2+(1-y)^2>1/16](media/2-3-1.gif)

Let's again calculate the quarter circle area:

    πr²
    π(1/16)
    π/16 is the full circle area
    π/64 is the quarter circle area

Because our sample space has an area of 2, we need to scale our area to fit the probability distribution. We also need to take the inverse of the area because we are looking for the area *outside* of the area we just calculated. Here's the final probability:

    1 - (1/2) π/64
    1 - π/128

As a decimal approximations:

```python
1 - math.pi/128
```

Now let's check our work.

```python
events = 100000
successes = 0

for i in range(0,events):
  x = random()
  y = 2*random() - 1
  if x**2 + (1-y)**2 > 1/16: successes+=1

successes/events
```

That looks correct.

Problem 3
=========

> I have a basket with three red balls, one blue balls and four
green balls. I draw 4 balls. I draw one and after that another one
and after another one. Therefore, in total I draw four balls without
putting back them in the basket.

How many items are in the sample space?
----

> (Hint: Sample space is the total different cases that I can draw two balls, for example (red, red), (green, blue))

Here's the answer using permutations:

```python
8*7*6*5
```

This can be calculated using permutations, but let's actually enumerate our sample space so that we can count matching items for the upcoming problems.

```python
def sample_space_nr(events):
  ss = set()

  for a in events:
    for b in events:
      for c in events:
        for d in events:
          if len([a,b,c,d]) == len(set([a,b,c,d])):
            ss.add((a,b,c,d))

  return ss

balls = ['r1','r2','r3','b','g1','g2','g3','g4']

ss = sample_space_nr(balls)

len(ss)
```

That has the correct number of items, so we are at least on the right track.

The individual outcomes also look correct:

```python
list(ss)[0:10]
```

What’s the probability that I see at least one red ball in the four balls that I have drawn?
-----

Because the events in the sample space are equally likely to occur, we can simply count the number of events that match our requirements and divide by the size of the sample space to get our probability.

```python
def at_least_one_red(outcome):
  """
  Returns true if an outcome has at least one red ball

  >>> at_least_one_red(['r1','g1','g2','g3'])
  True
  >>> at_least_one_red(['b','g1','g2','g3'])
  False
  """
  
  return 'r' in [b[0] for b in outcome]
  
def count_prob(ss, l):
  successes = 0
  
  for outcome in ss:
    if l(outcome): successes += 1
  
  return successes/len(ss)

count_prob(ss, at_least_one_red)
```

Let's try to validate this via Monte Carlo as well.

```python
def montecarlo2(events, l, count):
  runs = 100000

  successes = 0

  for _ in range(runs):
    outcome = sample(events, count)
  
    if l(outcome): successes += 1

  return successes/runs

montecarlo2(balls, at_least_one_red, 4)
```

What is the probability that I don’t see any red ball at all in the four balls that I have drawn?
-----

```python
def no_red(outcome):
  """
  Returns true if an outcome contains no red balls
  
  >>> no_red(['r1','b','b','b'])
  False
  >>> no_red(['g1','g2','g3','b'])
  True
  """
  
  return 'r' not in [b[0] for b in outcome]

count_prob(ss, no_red)
```

This is the inverse of the previous probability as expected.

Let's again check our work:

```python
montecarlo2(balls, no_red, 4)
```

What is the probability that at least three balls out of four drawn balls have the same color?
-----

```python
def at_least_three_same(outcome):
  """
  Returns true if at least three balls have the same color

  >>> at_least_three_same(['r1','b','g1','g2'])
  False
  >>> at_least_three_same(['r1','b','g1','r2'])
  False
  >>> at_least_three_same(['r1','r3','g1','r2'])
  True
  >>> at_least_three_same(['r1','g3','g1','g2'])
  True
  >>> at_least_three_same(['b1','b3','g1','b2'])
  True
  """

  return len([b for b in outcome if b[0] == 'r']) >= 3 or \
         len([b for b in outcome if b[0] == 'g']) >= 3 or \
         len([b for b in outcome if b[0] == 'b']) >= 3

count_prob(ss, at_least_three_same)
```

And the validation via simulation:

```python
montecarlo2(balls, at_least_three_same, 4)
```
